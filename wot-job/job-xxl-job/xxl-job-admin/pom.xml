<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>job-xxl-job</artifactId>
        <groupId>com.wot</groupId>
        <version>1.0</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>xxl-job-admin</artifactId>
    <version>1.0</version>
<!--    <packaging>jar</packaging>-->

<!--    <properties>-->
<!--        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>-->
<!--        <maven.compiler.source>1.8</maven.compiler.source>-->
<!--        <maven.compiler.target>1.8</maven.compiler.target>-->
<!--        &lt;!&ndash;maven方式跳过maven test, 等同$ mvn package -Dmaven.test.skip=true&ndash;&gt;-->
<!--        <maven.test.skip>true</maven.test.skip>-->
<!--    </properties>-->

    <dependencies>

        <!-- starter-web：spring-webmvc + autoconfigure + logback + yaml + tomcat -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- starter-test：junit + spring-test + mockito -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- freemarker-starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>

        <!-- mail-starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>

        <!-- starter-actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- mybatis-starter：mybatis + mybatis-spring + hikari（default） -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
        </dependency>
        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!-- xxl-job-core -->
        <dependency>
            <groupId>com.wot</groupId>
            <artifactId>xxl-job-core</artifactId>
            <!--			<version>${project.parent.version}</version>-->
        </dependency>

    </dependencies>

    <build>
        <!--打包时主动设置filtering为true排除配置文件-->
        <!--<resources>
            &lt;!&ndash; fonts file cannot use filter as the data structure of byte file will be changed via filter &ndash;&gt;
            <resource>
                &lt;!&ndash; 设定主资源目录  &ndash;&gt;
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>application.properties</exclude>
                    <exclude>logback.xml</exclude>
                </excludes>
                &lt;!&ndash; maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，是否对主资源目录开启资源过滤 &ndash;&gt;
                <filtering>true</filtering>
            </resource>
        </resources>-->
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
<!--				<version>${spring-boot.version}</version>-->
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <resources>
                        <resource>
                            <directory>src/main/resources</directory>
                            <filter>true</filter>
                            <excludes>
                                <exclude>application.properties</exclude>
                                <exclude>logback.xml</exclude>
                            </excludes>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
            <!-- docker -->
            <!--<plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.13</version>
                <configuration>
                    &lt;!&ndash; made of '[a-z0-9-_.]' &ndash;&gt;
                    <imageName>${project.artifactId}:${project.version}</imageName>
                    <dockerDirectory>${project.basedir}</dockerDirectory>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>-->
        </plugins>
    </build>

    <!--<build>
        <plugins>
            &lt;!&ndash; 指定启动类，将依赖打成外部jar包 &ndash;&gt;
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        &lt;!&ndash; 生成的jar中，不要包含pom.xml和pom.properties这两个文件 &ndash;&gt;
                        <addMavenDescriptor>false</addMavenDescriptor>
                        <manifest>
                            &lt;!&ndash; 是否要把第三方jar加入到类构建路径 &ndash;&gt;
                            <addClasspath>true</addClasspath>
                            &lt;!&ndash; 外部依赖jar包的最终位置 &ndash;&gt;
&lt;!&ndash;                            <classpathPrefix>lib/</classpathPrefix>&ndash;&gt;
                            &lt;!&ndash; 项目启动类 &ndash;&gt;
                            <mainClass>com.xxl.job.admin.XxlJobAdminApplication</mainClass>
                        </manifest>
&lt;!&ndash;                        <manifestEntries>&ndash;&gt;
&lt;!&ndash;                            <Class-Path>config/</Class-Path>&ndash;&gt;
&lt;!&ndash;                        </manifestEntries>&ndash;&gt;
                    </archive>
                    <excludes>
                        <exclude>*.properties</exclude>
                        <exclude>*.xml</exclude>
                    </excludes>
                </configuration>
            </plugin>
            &lt;!&ndash;拷贝依赖到jar外面的lib目录&ndash;&gt;
            &lt;!&ndash;<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-lib</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>target/lib</outputDirectory>
                            <excludeTransitive>false</excludeTransitive>
                            <stripVersion>false</stripVersion>
                            <includeScope>runtime</includeScope>
                        </configuration>
                    </execution>
                </executions>
            </plugin>&ndash;&gt;
        </plugins>
    </build>-->

</project>
